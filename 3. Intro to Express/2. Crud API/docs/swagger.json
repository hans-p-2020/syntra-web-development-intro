{
  "openapi": "3.0.3",
  "info": {
    "description": "This API can be used to interact with the dScribe Graph. It exposes CRUD operations for all the major objects like KPIs, Attributes, Data Assets and Dataset Elements.",
    "version": "1.0.0",
    "title": "dScribe Data Catalog API",
    "termsOfService": "https://dscribedata.com/terms/",
    "contact": {
      "email": "support@dscribedata.com"
    }
  },
  "servers": [
    {
      "url": "https://{your_tenant}.dscribedata.com/api",
      "description": "Production API server of dScribe"
    }
  ],
  "paths": {
    "/metric/list": {
      "summary": "Represents a Metric within dScribe",
      "post": {
        "tags": [
          "Metric"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ListBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/Metadata"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "KPIID"
                            ],
                            "properties": {
                              "KPIID": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/REPORTNoConnectDisconnect"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Reports.",
          "url": "https://documentation.dscribedata.com/reports"
        }
      }
    },
    "/metric/create": {
      "summary": "Represents a Metric within dScribe",
      "post": {
        "tags": [
          "Metric"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateReportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/metric/update": {
      "summary": "Represents a Metric within dScribe",
      "post": {
        "tags": [
          "Metric"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateKpiBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Report.",
          "url": "https://documentation.dscribedata.com/reports"
        }
      }
    },
    "/metric/delete": {
      "summary": "Represents a Metric within dScribe",
      "post": {
        "tags": [
          "Metric"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Report.",
          "url": "https://documentation.dscribedata.com/reports"
        }
      }
    },
    "/report/list": {
      "summary": "Represents a Report within dScribe",
      "post": {
        "tags": [
          "Report"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ListBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/Metadata"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "REPORTID"
                            ],
                            "properties": {
                              "REPORTID": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/REPORTNoConnectDisconnect"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Reports.",
          "url": "https://documentation.dscribedata.com/reports"
        }
      }
    },
    "/report/create": {
      "summary": "Represents a Report within dScribe",
      "post": {
        "tags": [
          "Report"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateReportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/report/update": {
      "summary": "Represents a Report within dScribe",
      "post": {
        "tags": [
          "Report"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateReportBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Report.",
          "url": "https://documentation.dscribedata.com/reports"
        }
      }
    },
    "/report/delete": {
      "summary": "Represents a Report within dScribe",
      "post": {
        "tags": [
          "Report"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Report.",
          "url": "https://documentation.dscribedata.com/reports"
        }
      }
    },
    "/dataset/list": {
      "summary": "Represents a Data Asset within dScribe",
      "post": {
        "tags": [
          "Data Asset"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ListBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/Metadata"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "KPIID"
                            ],
                            "properties": {
                              "KPIID": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/VIEWNoConnectDisconnect"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Data Asset.",
          "url": "https://documentation.dscribedata.com/data-assets"
        }
      }
    },
    "/dataset/create": {
      "summary": "Represents a Data Asset within dScribe",
      "post": {
        "tags": [
          "Data Asset"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateViewBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/dataset/update": {
      "summary": "Represents a Data Asset within dScribe",
      "post": {
        "tags": [
          "Data Asset"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateViewBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Data Asset.",
          "url": "https://documentation.dscribedata.com/data-assets"
        }
      }
    },
    "/dataset/delete": {
      "summary": "Represents a Data Asset within dScribe",
      "post": {
        "tags": [
          "Data Asset"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Data Asset.",
          "url": "https://documentation.dscribedata.com/data-assets"
        }
      }
    },
    "/dse/list": {
      "summary": "Represents a Column within dScribe",
      "post": {
        "tags": [
          "Column"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ListBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/Metadata"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "KPIID"
                            ],
                            "properties": {
                              "KPIID": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/COLUMN"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Column.",
          "url": "https://documentation.dscribedata.com/dse"
        }
      }
    },
    "/dse/create": {
      "summary": "Represents a Column within dScribe",
      "post": {
        "tags": [
          "Column"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateColumnBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/dse/update": {
      "summary": "Represents a Column within dScribe",
      "post": {
        "tags": [
          "Column"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateColumnBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Column.",
          "url": "https://documentation.dscribedata.com/dse"
        }
      }
    },
    "/dse/delete": {
      "summary": "Represents a Column within dScribe",
      "post": {
        "tags": [
          "Column"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessPostPutDelete"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "externalDocs": {
          "description": "Learn more about a Column.",
          "url": "https://documentation.dscribedata.com/dse"
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "requestBodies": {
      "UpdateKpiBody": {
        "description": "Update Report body. When it comes to properties, only existing properties can be updated with a valid value that has been created in the admin portal of the app.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "KPIID"
                    ],
                    "properties": {
                      "KPIID": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/REPORT"
                  }
                ]
              }
            }
          }
        }
      },
      "UpdateReportBody": {
        "description": "Update Report body. When it comes to properties, only existing properties can be updated with a valid value that has been created in the admin portal of the app.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "REPORTID"
                    ],
                    "properties": {
                      "REPORTID": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/REPORT"
                  }
                ]
              }
            }
          }
        }
      },
      "UpdateViewBody": {
        "description": "Update View body. When it comes to properties, only existing properties can be updated with a valid value that has been created in the admin portal of the app.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "VIEWID"
                    ],
                    "properties": {
                      "VIEWID": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/VIEW"
                  }
                ]
              }
            }
          }
        }
      },
      "UpdateColumnBody": {
        "description": "Update Column body. When it comes to properties, only existing properties can be updated with a valid value that has been created in the admin portal of the app.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "COLUMNID"
                    ],
                    "properties": {
                      "COLUMNID": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/COLUMN"
                  }
                ]
              }
            }
          }
        }
      },
      "CreateReportBody": {
        "description": "Create Report body. Creating properties in this way is not supported.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/REPORTNoProperty"
              }
            }
          }
        }
      },
      "CreateViewBody": {
        "description": "Create View body. Creating properties in this way is not supported.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VIEWNoProperty"
              }
            }
          }
        }
      },
      "CreateColumnBody": {
        "description": "Create Column body. Creating properties in this way is not supported.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/COLUMN"
              }
            }
          }
        }
      },
      "ListBody": {
        "description": "Body to filter results",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Options"
                },
                {
                  "type": "object",
                  "properties": {
                    "where": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Where"
                        },
                        {
                          "$ref": "#/components/schemas/OR"
                        },
                        {
                          "$ref": "#/components/schemas/AND"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DeleteBody": {
        "description": "Body to delete objects from the graph.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "description": "Array of IDs that have to be removed. When removing a KPI, the values should correspond with the KPIID field etc..",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "responses": {
      "SuccessPostPutDelete": {
        "description": "A successful operation for POST, PUT and DELETE",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessPostPutDelete"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "ConnectReport": {
        "type": "object",
        "description": "Using the connect key will look for REPORTs and create/remove a relation between the current object and the matching reports",
        "properties": {
          "where": {
            "type": "object",
            "properties": {
              "node": {
                "$ref": "#/components/schemas/WhereNoProperties"
              }
            }
          }
        }
      },
      "ConnectView": {
        "type": "object",
        "description": "Using the connect key will look for VIEWs and create/remove a relation between the current object and the matching reports",
        "properties": {
          "where": {
            "type": "object",
            "properties": {
              "node": {
                "$ref": "#/components/schemas/WhereNoProperties"
              }
            }
          }
        }
      },
      "OR": {
        "type": "array",
        "description": "Logical OR operator. The API will return the union of all the matches.",
        "items": {
          "$ref": "#/components/schemas/Where"
        }
      },
      "AND": {
        "type": "array",
        "description": "the logical AND operator. The API will only return documents that satisfy every statement.",
        "items": {
          "$ref": "#/components/schemas/Where"
        }
      },
      "Options": {
        "type": "object",
        "properties": {
          "limit": {
            "default": 20,
            "type": "number",
            "description": "The number of items that are being returned. Defaults to 20"
          },
          "offset": {
            "default": 0,
            "type": "number",
            "description": "used in combination with limit to implement pagination."
          }
        }
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "The total number of objects in the graph. Use in conjunction with limit and offset to implement pagination."
          }
        }
      },
      "WhereNoProperties": {
        "type": "object",
        "properties": {
          "{TAG}ID": {
            "type": "string",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID"
          },
          "{TAG}ID_NOT": {
            "type": "string",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID"
          },
          "{TAG}ID_IN": {
            "type": "array",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID",
            "items": {
              "type": "string"
            }
          },
          "{TAG}ID_NOT_IN": {
            "type": "array",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID",
            "items": {
              "type": "string"
            }
          },
          "{TAG}ID_CONTAINS": {
            "type": "string",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID"
          },
          "{TAG}ID_NOT_CONTAINS": {
            "type": "string",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID"
          },
          "{FIELD}": {
            "type": "string",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc..."
          },
          "{FIELD}_NOT": {
            "type": "string",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc..."
          },
          "{FIELD}_IN": {
            "type": "array",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...",
            "items": {
              "type": "string"
            }
          },
          "{FIELD}_NOT_IN": {
            "type": "array",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...",
            "items": {
              "type": "string"
            }
          },
          "{FIELD}_CONTAINS": {
            "type": "string",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc..."
          },
          "{FIELD}_NOT_CONTAINS": {
            "type": "string",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc..."
          }
        }
      },
      "Where": {
        "type": "object",
        "properties": {
          "{TAG}ID": {
            "type": "string",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID"
          },
          "{TAG}ID_NOT": {
            "type": "string",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID"
          },
          "{TAG}ID_IN": {
            "type": "array",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID",
            "items": {
              "type": "string"
            }
          },
          "{TAG}ID_NOT_IN": {
            "type": "array",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID",
            "items": {
              "type": "string"
            }
          },
          "{TAG}ID_CONTAINS": {
            "type": "string",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID"
          },
          "{TAG}ID_NOT_CONTAINS": {
            "type": "string",
            "description": "Replace {TAG} with one of the major objects described in this document -> KPIID, REPORTID, VIEWID, COLUMNID"
          },
          "{FIELD}": {
            "type": "string",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc..."
          },
          "{FIELD}_NOT": {
            "type": "string",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc..."
          },
          "{FIELD}_IN": {
            "type": "array",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...",
            "items": {
              "type": "string"
            }
          },
          "{FIELD}_NOT_IN": {
            "type": "array",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc...",
            "items": {
              "type": "string"
            }
          },
          "{FIELD}_CONTAINS": {
            "type": "string",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc..."
          },
          "{FIELD}_NOT_CONTAINS": {
            "type": "string",
            "description": "Replace {FIELD} with one of the fields that are returned from the API. If you wanted to query on NAME for example you can use NAME, NAME_NOT, etc..."
          }
        }
      },
      "SuccessPostPutDelete": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "failed": {
            "type": "number"
          },
          "retry": {
            "type": "number"
          },
          "successful": {
            "type": "number"
          },
          "time": {
            "type": "number"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "VIEWNoProperty": {
        "type": "object",
        "properties": {
          "NAME": {
            "type": "string"
          },
          "DESC": {
            "type": "string"
          },
          "DESCFULLTEXT": {
            "type": "string"
          },
          "DESCHTML": {
            "type": "string"
          },
          "TYPE": {
            "type": "string"
          },
          "FOLDER": {
            "type": "string"
          },
          "CREATED_ON": {
            "type": "string"
          },
          "CREATED_BY": {
            "type": "string"
          },
          "CHANGED_ON": {
            "type": "string"
          },
          "CHANGED_BY": {
            "type": "string"
          },
          "REPORT": {
            "type": "object",
            "properties": {
              "connect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectReport"
                }
              }
            }
          },
          "VIEW": {
            "type": "object",
            "properties": {
              "connect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectView"
                }
              }
            }
          }
        }
      },
      "VIEWNoConnectDisconnect": {
        "type": "object",
        "properties": {
          "NAME": {
            "type": "string"
          },
          "DESC": {
            "type": "string"
          },
          "DESCFULLTEXT": {
            "type": "string"
          },
          "DESCHTML": {
            "type": "string"
          },
          "TYPE": {
            "type": "string"
          },
          "FOLDER": {
            "type": "string"
          },
          "CREATED_ON": {
            "type": "string"
          },
          "CREATED_BY": {
            "type": "string"
          },
          "CHANGED_ON": {
            "type": "string"
          },
          "CHANGED_BY": {
            "type": "string"
          },
          "PROPERTIES": {
            "type": "object",
            "properties": {
              "{readable_id}": {
                "type": "array",
                "description": "The readable_id as defined in the portal with an array of values",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "NAME"
        ]
      },
      "VIEW": {
        "type": "object",
        "properties": {
          "NAME": {
            "type": "string"
          },
          "DESC": {
            "type": "string"
          },
          "DESCFULLTEXT": {
            "type": "string"
          },
          "DESCHTML": {
            "type": "string"
          },
          "TYPE": {
            "type": "string"
          },
          "FOLDER": {
            "type": "string"
          },
          "CREATED_ON": {
            "type": "string"
          },
          "CREATED_BY": {
            "type": "string"
          },
          "CHANGED_ON": {
            "type": "string"
          },
          "CHANGED_BY": {
            "type": "string"
          },
          "PROPERTIES": {
            "type": "object",
            "properties": {
              "{readable_id}": {
                "type": "array",
                "description": "The readable_id as defined in the portal with an array of values",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "REPORT": {
            "type": "object",
            "properties": {
              "disconnect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectReport"
                }
              },
              "connect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectReport"
                }
              }
            }
          },
          "VIEW": {
            "type": "object",
            "properties": {
              "disconnect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectView"
                }
              },
              "connect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectView"
                }
              }
            }
          }
        },
        "required": [
          "NAME"
        ]
      },
      "REPORTNoProperty": {
        "type": "object",
        "properties": {
          "NAME": {
            "type": "string"
          },
          "DESC": {
            "type": "string"
          },
          "DESCFULLTEXT": {
            "type": "string"
          },
          "DESCHTML": {
            "type": "string"
          },
          "INTERPRETATION": {
            "type": "string"
          },
          "CALC_FORMULA": {
            "type": "string"
          },
          "CALC_FORMULAHTML": {
            "type": "string"
          },
          "CALC_FORMULAFULLTEXT": {
            "type": "string"
          },
          "REPORT": {
            "type": "object",
            "properties": {
              "connect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectReport"
                }
              }
            }
          },
          "VIEW": {
            "type": "object",
            "properties": {
              "connect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectView"
                }
              }
            }
          }
        }
      },
      "REPORTNoConnectDisconnect": {
        "type": "object",
        "properties": {
          "NAME": {
            "type": "string"
          },
          "DESC": {
            "type": "string"
          },
          "DESCFULLTEXT": {
            "type": "string"
          },
          "DESCHTML": {
            "type": "string"
          },
          "INTERPRETATION": {
            "type": "string"
          },
          "CALC_FORMULA": {
            "type": "string"
          },
          "CALC_FORMULAHTML": {
            "type": "string"
          },
          "CALC_FORMULAFULLTEXT": {
            "type": "string"
          },
          "PROPERTIES": {
            "type": "object",
            "properties": {
              "{readable_id}": {
                "type": "array",
                "description": "The readable_id as defined in the portal with an array of values",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "NAME"
        ]
      },
      "REPORT": {
        "type": "object",
        "properties": {
          "NAME": {
            "type": "string"
          },
          "DESC": {
            "type": "string"
          },
          "DESCFULLTEXT": {
            "type": "string"
          },
          "DESCHTML": {
            "type": "string"
          },
          "INTERPRETATION": {
            "type": "string"
          },
          "CALC_FORMULA": {
            "type": "string"
          },
          "CALC_FORMULAHTML": {
            "type": "string"
          },
          "CALC_FORMULAFULLTEXT": {
            "type": "string"
          },
          "PROPERTIES": {
            "type": "object",
            "properties": {
              "{readable_id}": {
                "type": "array",
                "description": "The readable_id as defined in the portal with an array of values",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "REPORT": {
            "type": "object",
            "properties": {
              "disconnect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectReport"
                }
              },
              "connect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectReport"
                }
              }
            }
          },
          "VIEW": {
            "type": "object",
            "properties": {
              "disconnect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectView"
                }
              },
              "connect": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectView"
                }
              }
            }
          }
        },
        "required": [
          "NAME"
        ]
      },
      "COLUMN": {
        "type": "object",
        "properties": {
          "NAME": {
            "type": "string"
          },
          "DESC": {
            "type": "string"
          },
          "DESCFULLTEXT": {
            "type": "string"
          },
          "DESCHTML": {
            "type": "string"
          },
          "TYPE": {
            "type": "string"
          },
          "FIELDTYPE": {
            "type": "string"
          },
          "DATATYPE": {
            "type": "string"
          },
          "EXPRESSION": {
            "type": "string"
          },
          "PARENT": {
            "type": "string"
          },
          "IS_LEAF": {
            "type": "string"
          },
          "FOLDER": {
            "type": "string"
          },
          "VIEWID": {
            "type": "string"
          }
        },
        "required": [
          "NAME"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about dScribe",
    "url": "https://dscribedata.com"
  }
}